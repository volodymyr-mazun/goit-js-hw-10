{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst inputRef = document.getElementById('datetime-picker');\nconst startBtn = document.querySelector('button[data-start]');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = null;                                       // Глобальна змінна вибранної дати \nlet countdownInterval = null;\ninputRef.disabled = false;                                         // Поле активне перед запуском\nstartBtn.disabled = true;                                          // Кнопка неактивна перед запуском\n\nflatpickr(inputRef, {                                              // Ініціалізація flatpickr, виведення попередження, неможливість вибрати минулий час\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        const selectedDate = selectedDates[0];                     // Масив обраних дат, вибір першої\n        const now = new Date();\n\n    if (selectedDate <= now) {\n        iziToast.warning({\n            message: \"Please choose a date in the future\",\n            position: 'topCenter',\n            timeout: 3000,\n        });\n        startBtn.disabled = true;\n            userSelectedDate = null;\n        } else {\n            userSelectedDate = selectedDate;\n            startBtn.disabled = false;\n        }\n    },\n});\n\nstartBtn.addEventListener('click', () => {                          // Обробник кнопки, подія click\n    if (!userSelectedDate) return;                                  // Перевірка на пусте поле\n\n    startBtn.disabled = true;\n    inputRef.disabled = true;\n\n    countdownInterval = setInterval(() => {                         // Створення інтервалу кожну секунду\n        const now = new Date();\n        const deltaMs = userSelectedDate - now;\n\n        if (deltaMs <= 0) {                                         // Інструкція по закінченню часу\n            clearInterval(countdownInterval);                       // Видалення інтервалу\n            updateTimerDisplay(0, 0, 0, 0);\n\n        iziToast.success({                                          // Повідомлення по закінченню часу\n            title: 'Done!',\n            message: \"Countdown finished!\",\n            position: 'topCenter'\n        });\n\n        inputRef.disabled = false;      \n        startBtn.disabled = true;\n            return;\n        }\n\n    const { days, hours, minutes, seconds } = convertMs(deltaMs);\n    updateTimerDisplay(days, hours, minutes, seconds);\n    }, 1000);\n});\n\nfunction convertMs(ms) {                                            // Конвертація мілісекунд у час\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {                                    // Функція, перетворення у двох значне число\n    return String(value).padStart(2, '0');\n}\n\nfunction updateTimerDisplay(days, hours, minutes, seconds) {        // Функція, яка вносить значення в DOM-дерево\n    daysSpan.textContent = addLeadingZero(days);\n    hoursSpan.textContent = addLeadingZero(hours);\n    minutesSpan.textContent = addLeadingZero(minutes);\n    secondsSpan.textContent = addLeadingZero(seconds);\n}"],"names":["inputRef","startBtn","daysSpan","hoursSpan","minutesSpan","secondsSpan","userSelectedDate","countdownInterval","flatpickr","selectedDates","selectedDate","iziToast","deltaMs","updateTimerDisplay","days","hours","minutes","seconds","convertMs","ms","addLeadingZero","value"],"mappings":"+IAOA,MAAMA,EAAW,SAAS,eAAe,iBAAiB,EACpDC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3D,IAAIC,EAAmB,KACnBC,EAAoB,KACxBP,EAAS,SAAW,GACpBC,EAAS,SAAW,GAEpBO,EAAUR,EAAU,CAChB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQS,EAAe,CACnB,MAAMC,EAAeD,EAAc,CAAC,EAGpCC,GAFY,IAAI,MAGhBC,EAAS,QAAQ,CACb,QAAS,qCACT,SAAU,YACV,QAAS,GACrB,CAAS,EACDV,EAAS,SAAW,GAChBK,EAAmB,OAEnBA,EAAmBI,EACnBT,EAAS,SAAW,GAE3B,CACL,CAAC,EAEDA,EAAS,iBAAiB,QAAS,IAAM,CAChCK,IAELL,EAAS,SAAW,GACpBD,EAAS,SAAW,GAEpBO,EAAoB,YAAY,IAAM,CAElC,MAAMK,EAAUN,EADJ,IAAI,KAGhB,GAAIM,GAAW,EAAG,CACd,cAAcL,CAAiB,EAC/BM,EAAmB,EAAG,EAAG,EAAG,CAAC,EAEjCF,EAAS,QAAQ,CACb,MAAO,QACP,QAAS,sBACT,SAAU,WACtB,CAAS,EAEDX,EAAS,SAAW,GACpBC,EAAS,SAAW,GAChB,MACH,CAEL,KAAM,CAAE,KAAAa,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAO,EAC3DC,EAAmBC,EAAMC,EAAOC,EAASC,CAAO,CAC/C,EAAE,GAAI,EACX,CAAC,EAED,SAASC,EAAUC,EAAI,CAMnB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAC1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EACpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EACjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C,CAEA,SAASG,EAAeC,EAAO,CAC3B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACxC,CAEA,SAASR,EAAmBC,EAAMC,EAAOC,EAASC,EAAS,CACvDf,EAAS,YAAckB,EAAeN,CAAI,EAC1CX,EAAU,YAAciB,EAAeL,CAAK,EAC5CX,EAAY,YAAcgB,EAAeJ,CAAO,EAChDX,EAAY,YAAce,EAAeH,CAAO,CACpD"}